# Spring Boot Admin server
server.port=8882
spring.application.name=sb-admin-server
info.component=Spring Boot Admin Server
spring.boot.admin.ui.title=Spring Boot Admin Server
spring.boot.admin.ui.brand=<img src="assets/img/icon-spring-boot-admin.svg"><span>Spring Boot Admin Server</span>
# contex path for spring boot admin server
spring.boot.admin.context-path=

##################################################
# Ignite configuration for Spring Boot Admin in cluster
##################################################
ignite.configFile=classpath:ignite-config.xml
# Auto-activate cluster if given topology is set.
# "*"           ==> means auto-start without topology check
# "node1;node2" ==> wait for node1 and node2 to be up to start. (Checked agains ignite.name())
ignite.activateCluster.topology=*

##################################################
# Spring boot admin - auto management
##################################################
# Management port, should be different from server.port to be protected by a firewall
management.server.port=8888
# As with Spring Boot 2 most of the endpoints arenâ€™t exposed via http by default,
# we expose all of them. For production you should carefully choose which endpoints to expose.
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS
# see https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/html/production-ready-monitoring.html
management.server.servlet.context-path=/
# Enable management spring actuator global logging file
logging.file=/var/log/sbadmin.log
# Optional: Use console log pattern (colored) for spring boot admin logging file endpoint
logging.pattern.file=${CONSOLE_LOG_PATTERN:%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%-15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}
# spring boot (>=2.2) jmx enabled
spring.jmx.enabled=true
